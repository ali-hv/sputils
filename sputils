#!/bin/bash

# === Auto-detect src path and base package ===
detect_base_package() {
  local base_dir="src/main/java"
  if [ ! -d "$base_dir" ]; then
    echo "‚ùå Error: Cannot find src/main/java directory."
    exit 1
  fi

  # Try to find the main Spring Boot application class
  local application_file
  application_file=$(find "$base_dir" -name "*Application.java" | head -n 1)

  if [ -n "$application_file" ]; then
    # Strip prefix and filename to get the base package path
    local relative_path=${application_file#"$base_dir/"}
    local package_path=$(dirname "$relative_path")
    BASE_PACKAGE_PATH="$base_dir/$package_path"
    BASE_PACKAGE=$(echo "$package_path" | tr '/' '.')
  else
    # Fallback: use the first directory structure
    local package_path
    package_path=$(find "$base_dir" -type d -mindepth 1 -printf "%P\n" | grep -m 1 -E '^[a-zA-Z0-9_/]+$')
    if [ -z "$package_path" ]; then
      echo "‚ùå Error: Could not detect base package under src/main/java"
      exit 1
    fi
    BASE_PACKAGE_PATH="$base_dir/$package_path"
    BASE_PACKAGE=$(echo "$package_path" | tr '/' '.')
  fi
}


# === Show usage ===
print_help() {
  echo "Usage: sputils <command> [options]"
  echo
  echo "Commands:"
  echo "  startapp <app_name> [--gen-classes]    Create feature package structure"
  echo "  help                                   Show this help message"
  echo
}

# === Create app ===
startapp() {
  local app_name=$1
  local generate_classes=$2

  if [ -z "$app_name" ]; then
    echo "‚ùå Error: app name is required"
    echo "Usage: sputils startapp <app_name> [--gen-classes]"
    exit 1
  fi

  detect_base_package

  local full_path="${BASE_PACKAGE_PATH}/${app_name}"
  declare -A folder_to_class=(
    ["controller"]="Controller"
    ["dto"]="Dto"
    ["entity"]="Entity"
    ["mapper"]="Mapper"
    ["repository"]="Repository"
    ["service"]="Service"
  )

  echo "üì¶ Creating feature package: ${BASE_PACKAGE}.${app_name}"

  for folder in "${!folder_to_class[@]}"; do
    local dir="${full_path}/${folder}"
    mkdir -p "$dir"
    echo "‚úÖ Created: $dir"

    if [ "$generate_classes" == "--gen-classes" ]; then
      local class_name
      class_name="$(tr '[:lower:]' '[:upper:]' <<< ${app_name:0:1})${app_name:1}${folder_to_class[$folder]}"
      local file_path="$dir/${class_name}.java"

      if [[ "$folder" == "mapper" || "$folder" == "repository" ]]; then
        cat > "$file_path" <<EOF
package ${BASE_PACKAGE}.${app_name}.${folder};

public interface ${class_name} {
    // TODO: define methods for ${class_name}
}
EOF
        echo "üìù Created interface: $file_path"
      else
        cat > "$file_path" <<EOF
package ${BASE_PACKAGE}.${app_name}.${folder};

public class ${class_name} {
    // TODO: implement ${class_name}
}
EOF
        echo "üìù Created class: $file_path"
      fi
    fi
  done
}

# === Entry Point ===
case "$1" in
  startapp)
    shift
    startapp "$@"
    ;;
  help|-h|--help)
    print_help
    ;;
  *)
    echo "‚ùå Unknown command: $1"
    print_help
    exit 1
    ;;
esac
